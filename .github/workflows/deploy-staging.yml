name: Deploy to Staging

on:
  push:
    branches: [ staging ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy even if tests fail'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.9'

jobs:
  # Run basic tests before deployment
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: rally_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8

    - name: Set up test environment variables
      run: |
        echo "TEST_DATABASE_URL=postgresql://postgres:postgres@localhost:5432/rally_test" >> $GITHUB_ENV
        echo "FLASK_ENV=testing" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    - name: Run database migrations
      run: |
        python -c "
        from database_config import get_db_url
        from sqlalchemy import create_engine
        from app.models.database_models import Base
        engine = create_engine('${{ env.TEST_DATABASE_URL }}')
        Base.metadata.create_all(engine)
        print('Test database setup complete')
        "

    - name: Run basic linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run unit tests
      run: |
        pytest tests/ -v \
          --cov=app \
          --cov=utils \
          --cov-report=term-missing \
          --junit-xml=test-results.xml \
          -m "unit" \
          --tb=short \
          --maxfail=5
      continue-on-error: ${{ github.event.inputs.force_deploy == 'true' }}

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: staging-test-results
        path: test-results.xml

  # Deploy to Railway staging environment
  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: always() && (needs.test.result == 'success' || github.event.inputs.force_deploy == 'true')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Railway CLI
      run: |
        curl -fsSL https://railway.app/install.sh | sh
        echo "$HOME/.railway/bin" >> $GITHUB_PATH

    - name: Deploy to Railway Staging
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        echo "üöÇ Deploying to Railway staging environment..."
        railway up --environment staging --detach
        
        echo "‚è≥ Waiting for deployment to complete..."
        sleep 30
        
        echo "üîç Checking deployment status..."
        railway status --environment staging

    - name: Verify deployment
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        echo "üîç Verifying staging deployment..."
        
        # Get the staging URL
        STAGING_URL="https://rally-staging.up.railway.app"
        
        # Wait for the app to be ready
        echo "‚è≥ Waiting for application to be ready..."
        sleep 60
        
        # Test health endpoint
        echo "ü©∫ Testing health endpoint..."
        curl -f "$STAGING_URL/health" || {
          echo "‚ùå Health check failed"
          exit 1
        }
        
        echo "‚úÖ Staging deployment successful!"
        echo "üåê Staging URL: $STAGING_URL"

    - name: Run smoke tests on staging
      run: |
        echo "üß™ Running smoke tests on staging..."
        
        STAGING_URL="https://rally-staging.up.railway.app"
        
        # Test basic endpoints
        echo "Testing root endpoint..."
        curl -f "$STAGING_URL/" > /dev/null || echo "Root endpoint test failed (may be expected if requires auth)"
        
        echo "Testing login page..."
        curl -f "$STAGING_URL/login" > /dev/null || echo "Login page test failed"
        
        echo "Testing API health..."
        curl -f "$STAGING_URL/health" > /dev/null || {
          echo "‚ùå API health test failed"
          exit 1
        }
        
        echo "‚úÖ Smoke tests passed!"

    - name: Post deployment summary
      if: always()
      run: |
        echo "## üöÄ Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: Staging" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: https://rally-staging.up.railway.app" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ **Status**: Deployment successful" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Status**: Deployment failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "- Test the staging environment at https://rally-staging.up.railway.app" >> $GITHUB_STEP_SUMMARY
        echo "- Run integration tests if needed" >> $GITHUB_STEP_SUMMARY
        echo "- Consider populating with production data if required" >> $GITHUB_STEP_SUMMARY

  # Notify on deployment status
  notify:
    runs-on: ubuntu-latest
    needs: [test, deploy]
    if: always()
    
    steps:
    - name: Notification
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "‚úÖ Staging deployment successful!"
          echo "üåê Staging URL: https://rally-staging.up.railway.app"
        else
          echo "‚ùå Staging deployment failed!"
          echo "Check the deployment logs for details."
        fi 
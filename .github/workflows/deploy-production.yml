name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      confirm_production:
        description: 'Type "PRODUCTION" to confirm production deployment'
        required: true
        type: string
      skip_tests:
        description: 'Skip tests (NOT recommended for production)'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.9'

jobs:
  # Comprehensive testing before production deployment
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: rally_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate production deployment confirmation
      if: github.event_name == 'workflow_dispatch'
      run: |
        if [ "${{ github.event.inputs.confirm_production }}" != "PRODUCTION" ]; then
          echo "❌ Production deployment requires typing 'PRODUCTION' to confirm"
          exit 1
        fi
        echo "✅ Production deployment confirmed"

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8

    - name: Set up test environment variables
      run: |
        echo "TEST_DATABASE_URL=postgresql://postgres:postgres@localhost:5432/rally_test" >> $GITHUB_ENV
        echo "FLASK_ENV=testing" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    - name: Run database migrations
      run: |
        python -c "
        from database_config import get_db_url
        from sqlalchemy import create_engine
        from app.models.database_models import Base
        engine = create_engine('${{ env.TEST_DATABASE_URL }}')
        Base.metadata.create_all(engine)
        print('Test database setup complete')
        "

    - name: Run comprehensive linting
      run: |
        echo "🔍 Running comprehensive code quality checks..."
        flake8 . --count --statistics --max-line-length=88 --exclude=venv,migrations,logs
      continue-on-error: false

    - name: Run full test suite
      if: github.event.inputs.skip_tests != 'true'
      run: |
        echo "🧪 Running comprehensive test suite for production..."
        pytest tests/ -v \
          --cov=app \
          --cov=utils \
          --cov-report=term-missing \
          --cov-report=html \
          --junit-xml=test-results.xml \
          --tb=short \
          --maxfail=1
      continue-on-error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: production-test-results
        path: |
          test-results.xml
          htmlcov/

  # Deploy to Railway production environment
  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: success() # Only deploy if tests pass
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Railway CLI
      run: |
        curl -fsSL https://railway.app/install.sh | sh
        echo "$HOME/.railway/bin" >> $GITHUB_PATH

    - name: Deploy to Railway Production
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        echo "🚂 Deploying to Railway PRODUCTION environment..."
        echo "⚠️  This will affect live users!"
        
        railway up --environment production --detach
        
        echo "⏳ Waiting for production deployment to complete..."
        sleep 45
        
        echo "🔍 Checking production deployment status..."
        railway status --environment production

    - name: Verify production deployment
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        echo "🔍 Verifying PRODUCTION deployment..."
        
        # Get the production URL (adjust as needed)
        PRODUCTION_URL="https://rally.up.railway.app"
        
        # Wait for the app to be ready
        echo "⏳ Waiting for production application to be ready..."
        sleep 90
        
        # Test health endpoint
        echo "🩺 Testing production health endpoint..."
        curl -f "$PRODUCTION_URL/health" || {
          echo "❌ Production health check failed"
          exit 1
        }
        
        echo "✅ Production deployment successful!"
        echo "🌐 Production URL: $PRODUCTION_URL"

    - name: Run production smoke tests
      run: |
        echo "🧪 Running critical smoke tests on PRODUCTION..."
        
        PRODUCTION_URL="https://rally.up.railway.app"
        
        # Test critical endpoints only
        echo "Testing production health..."
        curl -f "$PRODUCTION_URL/health" > /dev/null || {
          echo "❌ Production health test failed"
          exit 1
        }
        
        echo "Testing production login availability..."
        curl -I "$PRODUCTION_URL/login" | grep -q "200\|302" || {
          echo "❌ Production login test failed"
          exit 1
        }
        
        echo "✅ Production smoke tests passed!"

    - name: Create production deployment tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        TAG_NAME="production_deploy_${TIMESTAMP}"
        
        git tag -a "$TAG_NAME" -m "Production deployment on $(date)"
        git push origin "$TAG_NAME"
        
        echo "📋 Created deployment tag: $TAG_NAME"

    - name: Post production deployment summary
      if: always()
      run: |
        echo "## 🚀 PRODUCTION Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: 🚨 PRODUCTION 🚨" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: https://rally.up.railway.app" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ **Status**: Production deployment successful" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Status**: Production deployment failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚨 Production Checklist:" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] Monitor application performance" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] Check error logs" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] Verify database integrity" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] Test critical user flows" >> $GITHUB_STEP_SUMMARY

  # Critical notification for production deployments
  notify:
    runs-on: ubuntu-latest
    needs: [test, deploy]
    if: always()
    
    steps:
    - name: Production Deployment Notification
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "🎉 PRODUCTION deployment successful!"
          echo "🌐 Live URL: https://rally.up.railway.app"
          echo "📊 Monitor the application closely for the next hour"
        else
          echo "🚨 PRODUCTION deployment FAILED!"
          echo "❌ Live site may be affected - immediate attention required!"
          echo "🔧 Check the deployment logs and consider rollback if necessary"
        fi 
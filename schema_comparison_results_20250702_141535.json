{
  "timestamp": "2025-07-02T14:14:57.648100",
  "environments": {
    "local": {
      "current_revision": "\u2705 Successfully imported SQLAlchemy models. Found 22 tables in metadata.\n9e89c138eadd (head)",
      "has_pending_migrations": true,
      "pending_output": "\u2705 Successfully imported SQLAlchemy models. Found 22 tables in metadata.\n  FAILED: New upgrade operations detected: [('add_table', Table('user_contexts', MetaData(),\n  Column('user_id', Integer(), ForeignKey('users.id'), table=<user_contexts>, primary_key=True,\n  nullable=False), Column('active_league_id', Integer(), ForeignKey('leagues.id'), table=<user_contexts>),\n  Column('active_team_id', Integer(), ForeignKey('teams.id'), table=<user_contexts>), Column('last_updated',\n  DateTime(timezone=True), table=<user_contexts>,\n  onupdate=ColumnElementColumnDefault(<sqlalchemy.sql.functions.now at 0x105e57280; now>),\n  default=ColumnElementColumnDefault(<sqlalchemy.sql.functions.now at 0x105e57250; now>)), schema=None)),\n  ('remove_index', Index('idx_pros_active', Column('is_active', BOOLEAN(), table=<pros>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107d31250>,\n  for_update=False)))), ('remove_table', Table('pros', MetaData(), Column('id', INTEGER(), table=<pros>,\n  primary_key=True, nullable=False), Column('name', VARCHAR(length=255), table=<pros>, nullable=False),\n  Column('bio', TEXT(), table=<pros>), Column('specialties', TEXT(), table=<pros>), Column('hourly_rate',\n  NUMERIC(precision=6, scale=2), table=<pros>), Column('image_url', VARCHAR(length=500), table=<pros>),\n  Column('phone', VARCHAR(length=20), table=<pros>), Column('email', VARCHAR(length=255), table=<pros>),\n  Column('is_active', BOOLEAN(), table=<pros>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107d31250>,\n  for_update=False)), Column('created_at', TIMESTAMP(), table=<pros>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e01640>,\n  for_update=False)), Column('updated_at', TIMESTAMP(), table=<pros>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e01c40>,\n  for_update=False)), schema=None)), ('remove_index', Index('idx_team_format_mappings_active',\n  Column('league_id', VARCHAR(length=50), table=<team_format_mappings>, nullable=False, comment='League\n  identifier (CNSWPL, NSTF, APTA_CHICAGO, CITA)'), Column('is_active', BOOLEAN(),\n  table=<team_format_mappings>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at\n  0x107e13040>, for_update=False)))), ('remove_index', Index('idx_team_format_mappings_lookup',\n  Column('league_id', VARCHAR(length=50), table=<team_format_mappings>, nullable=False, comment='League\n  identifier (CNSWPL, NSTF, APTA_CHICAGO, CITA)'), Column('user_input_format', VARCHAR(length=100),\n  table=<team_format_mappings>, nullable=False, comment='Format that users might enter or have in their\n  session data'))), ('remove_table', Table('team_format_mappings', MetaData(), Column('id', INTEGER(),\n  table=<team_format_mappings>, primary_key=True, nullable=False), Column('league_id', VARCHAR(length=50),\n  ForeignKey('leagues.league_id'), table=<team_format_mappings>, nullable=False, comment='League identifier\n  (CNSWPL, NSTF, APTA_CHICAGO, CITA)'), Column('user_input_format', VARCHAR(length=100),\n  table=<team_format_mappings>, nullable=False, comment='Format that users might enter or have in their\n  session data'), Column('database_series_format', VARCHAR(length=100), table=<team_format_mappings>,\n  nullable=False, comment='Actual series format as stored in the database'), Column('mapping_type',\n  VARCHAR(length=50), table=<team_format_mappings>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e01f70>,\n  for_update=False), comment='Type of mapping (series_mapping, team_mapping, etc.)'), Column('description',\n  TEXT(), table=<team_format_mappings>, comment='Human-readable description of this mapping'),\n  Column('is_active', BOOLEAN(), table=<team_format_mappings>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e13040>,\n  for_update=False)), Column('created_at', TIMESTAMP(), table=<team_format_mappings>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e131c0>,\n  for_update=False)), Column('updated_at', TIMESTAMP(), table=<team_format_mappings>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e13280>,\n  for_update=False)), schema=None)), ('remove_index', Index('idx_pro_lessons_lesson_date',\n  Column('lesson_date', DATE(), table=<pro_lessons>, nullable=False))), ('remove_index',\n  Index('idx_pro_lessons_status', Column('status', VARCHAR(length=50), table=<pro_lessons>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e20e20>,\n  for_update=False)))), ('remove_index', Index('idx_pro_lessons_user_email', Column('user_email',\n  VARCHAR(length=255), table=<pro_lessons>, nullable=False))), ('remove_table', Table('pro_lessons',\n  MetaData(), Column('id', INTEGER(), table=<pro_lessons>, primary_key=True, nullable=False),\n  Column('user_email', VARCHAR(length=255), table=<pro_lessons>, nullable=False), Column('pro_id',\n  INTEGER(), ForeignKey('pros.id'), table=<pro_lessons>), Column('lesson_date', DATE(), table=<pro_lessons>,\n  nullable=False), Column('lesson_time', TIME(), table=<pro_lessons>, nullable=False), Column('focus_areas',\n  TEXT(), table=<pro_lessons>, nullable=False), Column('notes', TEXT(), table=<pro_lessons>),\n  Column('status', VARCHAR(length=50), table=<pro_lessons>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e20e20>,\n  for_update=False)), Column('created_at', TIMESTAMP(), table=<pro_lessons>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e26040>,\n  for_update=False)), Column('updated_at', TIMESTAMP(), table=<pro_lessons>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e26160>,\n  for_update=False)), schema=None)), ('remove_index', Index('idx_system_settings_key', Column('key',\n  VARCHAR(length=100), table=<system_settings>, nullable=False))), ('remove_table', Table('system_settings',\n  MetaData(), Column('id', INTEGER(), table=<system_settings>, primary_key=True, nullable=False),\n  Column('key', VARCHAR(length=100), table=<system_settings>, nullable=False), Column('value', TEXT(),\n  table=<system_settings>, nullable=False), Column('description', TEXT(), table=<system_settings>),\n  Column('created_at', TIMESTAMP(), table=<system_settings>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e26730>,\n  for_update=False)), Column('updated_at', TIMESTAMP(), table=<system_settings>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e2f1f0>,\n  for_update=False)), schema=None)), ('remove_index', Index('idx_series_mappings_lookup',\n  Column('league_id', VARCHAR(length=50), table=<series_name_mappings>, nullable=False, comment='League\n  identifier (CNSWPL, NSTF, etc.)'), Column('user_series_name', VARCHAR(length=100),\n  table=<series_name_mappings>, nullable=False, comment='Series name as it appears in user session data'))),\n  ('remove_table', Table('series_name_mappings', MetaData(), Column('id', INTEGER(),\n  table=<series_name_mappings>, primary_key=True, nullable=False), Column('league_id', VARCHAR(length=50),\n  ForeignKey('leagues.league_id'), table=<series_name_mappings>, nullable=False, comment='League identifier\n  (CNSWPL, NSTF, etc.)'), Column('user_series_name', VARCHAR(length=100), table=<series_name_mappings>,\n  nullable=False, comment='Series name as it appears in user session data'), Column('database_series_name',\n  VARCHAR(length=100), table=<series_name_mappings>, nullable=False, comment='Series name as stored in\n  database'), Column('created_at', TIMESTAMP(), table=<series_name_mappings>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e2fe80>,\n  for_update=False)), Column('updated_at', TIMESTAMP(), table=<series_name_mappings>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e2fd60>,\n  for_update=False)), schema=None)), ('add_fk',\n  ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x10e0f64f0>, None,\n  table=Table('activity_log', MetaData(), Column('team_id', NullType(), ForeignKey('teams.id'),\n  table=<activity_log>), schema=None))), ('add_fk',\n  ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x10e0f6590>, None,\n  table=Table('activity_log', MetaData(), Column('player_id', NullType(), ForeignKey('players.id'),\n  table=<activity_log>), schema=None))), ('remove_index', Index('idx_club_leagues_club_id',\n  Column('club_id', INTEGER(), table=<club_leagues>, nullable=False))), ('remove_index',\n  Index('idx_club_leagues_league_id', Column('league_id', INTEGER(), table=<club_leagues>,\n  nullable=False))), ('remove_index', Index('idx_leagues_league_id', Column('league_id',\n  VARCHAR(length=255), table=<leagues>, nullable=False))), ('remove_index',\n  Index('idx_availability_user_date', Column('user_id', INTEGER(), table=<player_availability>),\n  Column('match_date', TIMESTAMP(timezone=True), table=<player_availability>, nullable=False))),\n  ('remove_index', Index('idx_unique_user_date_availability', Column('user_id', INTEGER(),\n  table=<player_availability>), Column('match_date', TIMESTAMP(timezone=True), table=<player_availability>,\n  nullable=False), unique=True)), ('add_constraint', UniqueConstraint(Column('player_name', NullType(),\n  table=<player_availability>), Column('match_date', NullType(), table=<player_availability>),\n  Column('series_id', NullType(), table=<player_availability>))), ('remove_fk',\n  ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x10e0f65e0>, None,\n  name='player_availability_user_id_fkey', table=Table('player_availability', MetaData(), Column('user_id',\n  NullType(), ForeignKey('users.id'), table=<player_availability>), schema=None))), ('add_fk',\n  ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x10e0f6630>, None,\n  table=Table('player_availability', MetaData(), Column('player_id', NullType(), ForeignKey('players.id'),\n  table=<player_availability>), schema=None))), ('add_fk',\n  ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x10e0f6680>, None,\n  table=Table('player_availability', MetaData(), Column('series_id', NullType(), ForeignKey('series.id'),\n  table=<player_availability>), schema=None))), ('remove_column', None, 'player_availability',\n  Column('user_id', INTEGER(), ForeignKey('users.id'), ForeignKey('users.id'),\n  table=<player_availability>)), ('add_fk',\n  ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x10e0f6720>, None,\n  table=Table('player_season_tracking', MetaData(), Column('league_id', NullType(),\n  ForeignKey('leagues.id'), table=<player_season_tracking>), schema=None))), ('add_fk',\n  ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x10e0f66d0>, None,\n  table=Table('poll_responses', MetaData(), Column('player_id', NullType(), ForeignKey('players.id'),\n  table=<poll_responses>), schema=None))), ('add_fk',\n  ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x10e0f6770>, None,\n  table=Table('polls', MetaData(), Column('team_id', NullType(), ForeignKey('teams.id'), table=<polls>),\n  schema=None))), ('remove_constraint', UniqueConstraint(Column('team_name', NullType(), table=<teams>),\n  Column('league_id', NullType(), table=<teams>))), ('remove_column', None, 'user_player_associations',\n  Column('is_primary', BOOLEAN(), table=<user_player_associations>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e6d340>,\n  for_update=False))), ('remove_index', Index('idx_users_league_id', Column('league_id', INTEGER(),\n  table=<users>))), ('remove_index', Index('idx_users_tenniscores_player_id',\n  Column('tenniscores_player_id', VARCHAR(length=255), table=<users>))), ('remove_fk',\n  ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x10e0f6860>, None,\n  name='users_league_id_fkey', table=Table('users', MetaData(), Column('league_id', NullType(),\n  ForeignKey('leagues.id'), table=<users>), schema=None))), ('remove_column', None, 'users',\n  Column('league_id', INTEGER(), ForeignKey('leagues.id'), ForeignKey('leagues.id'), table=<users>)),\n  ('remove_column', None, 'users', Column('tenniscores_player_id', VARCHAR(length=255), table=<users>))]\nINFO:database_config:Using database URL with host: localhost:5432\nINFO:database_config:Created SQLAlchemy engine for database\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.autogenerate.compare] Detected added table 'user_contexts'\nINFO  [alembic.ddl.postgresql] Detected sequence named 'pros_id_seq' as owned by integer column 'pros(id)', assuming SERIAL and omitting\nINFO  [alembic.autogenerate.compare] Detected removed index 'idx_pros_active' on 'pros'\nINFO  [alembic.autogenerate.compare] Detected removed table 'pros'\nINFO  [alembic.ddl.postgresql] Detected sequence named 'team_format_mappings_id_seq' as owned by integer column 'team_format_mappings(id)', assuming SERIAL and omitting\nINFO  [alembic.autogenerate.compare] Detected removed index 'idx_team_format_mappings_active' on 'team_format_mappings'\nINFO  [alembic.autogenerate.compare] Detected removed index 'idx_team_format_mappings_lookup' on 'team_format_mappings'\nINFO  [alembic.autogenerate.compare] Detected removed table 'team_format_mappings'\nINFO  [alembic.ddl.postgresql] Detected sequence named 'pro_lessons_id_seq' as owned by integer column 'pro_lessons(id)', assuming SERIAL and omitting\nINFO  [alembic.autogenerate.compare] Detected removed index 'idx_pro_lessons_lesson_date' on 'pro_lessons'\nINFO  [alembic.autogenerate.compare] Detected removed index 'idx_pro_lessons_status' on 'pro_lessons'\nINFO  [alembic.autogenerate.compare] Detected removed index 'idx_pro_lessons_user_email' on 'pro_lessons'\nINFO  [alembic.autogenerate.compare] Detected removed table 'pro_lessons'\nINFO  [alembic.ddl.postgresql] Detected sequence named 'system_settings_id_seq' as owned by integer column 'system_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.autogenerate.compare] Detected removed index 'idx_system_settings_key' on 'system_settings'\nINFO  [alembic.autogenerate.compare] Detected removed table 'system_settings'\nINFO  [alembic.ddl.postgresql] Detected sequence named 'series_name_mappings_id_seq' as owned by integer column 'series_name_mappings(id)', assuming SERIAL and omitting\nINFO  [alembic.autogenerate.compare] Detected removed index 'idx_series_mappings_lookup' on 'series_name_mappings'\nINFO  [alembic.autogenerate.compare] Detected removed table 'series_name_mappings'\nINFO  [alembic.ddl.postgresql] Detected sequence named 'series_stats_id_seq' as owned by integer column 'series_stats(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'match_scores_id_seq' as owned by integer column 'match_scores(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'club_leagues_id_seq' as owned by integer column 'club_leagues(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'player_history_id_seq' as owned by integer column 'player_history(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'series_leagues_id_seq' as owned by integer column 'series_leagues(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'player_season_tracking_id_seq' as owned by integer column 'player_season_tracking(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'poll_choices_id_seq' as owned by integer column 'poll_choices(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_activity_logs_id_seq' as owned by integer column 'user_activity_logs(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'player_availability_id_seq' as owned by integer column 'player_availability(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'schedule_id_seq' as owned by integer column 'schedule(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_instructions_id_seq' as owned by integer column 'user_instructions(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'poll_responses_id_seq' as owned by integer column 'poll_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.autogenerate.compare] Detected added foreign key (team_id)(id) on table activity_log\nINFO  [alembic.autogenerate.compare] Detected added foreign key (player_id)(id) on table activity_log\nINFO  [alembic.autogenerate.compare] Detected removed index 'idx_club_leagues_club_id' on 'club_leagues'\nINFO  [alembic.autogenerate.compare] Detected removed index 'idx_club_leagues_league_id' on 'club_leagues'\nINFO  [alembic.autogenerate.compare] Detected removed index 'idx_leagues_league_id' on 'leagues'\nINFO  [alembic.autogenerate.compare] Detected removed index 'idx_availability_user_date' on 'player_availability'\nINFO  [alembic.autogenerate.compare] Detected removed index 'idx_unique_user_date_availability' on 'player_availability'\nINFO  [alembic.autogenerate.compare] Detected added unique constraint 'unique_player_availability' on '('player_name', 'match_date', 'series_id')'\nINFO  [alembic.autogenerate.compare] Detected removed foreign key (user_id)(id) on table player_availability\nINFO  [alembic.autogenerate.compare] Detected added foreign key (player_id)(id) on table player_availability\nINFO  [alembic.autogenerate.compare] Detected added foreign key (series_id)(id) on table player_availability\nINFO  [alembic.autogenerate.compare] Detected removed column 'player_availability.user_id'\nINFO  [alembic.autogenerate.compare] Detected added foreign key (league_id)(id) on table player_season_tracking\nINFO  [alembic.autogenerate.compare] Detected added foreign key (player_id)(id) on table poll_responses\nINFO  [alembic.autogenerate.compare] Detected added foreign key (team_id)(id) on table polls\nINFO  [alembic.autogenerate.compare] Detected removed unique constraint 'unique_team_name_per_league' on 'teams'\nINFO  [alembic.autogenerate.compare] Detected removed column 'user_player_associations.is_primary'\nINFO  [alembic.autogenerate.compare] Detected removed index 'idx_users_league_id' on 'users'\nINFO  [alembic.autogenerate.compare] Detected removed index 'idx_users_tenniscores_player_id' on 'users'\nINFO  [alembic.autogenerate.compare] Detected removed foreign key (league_id)(id) on table users\nINFO  [alembic.autogenerate.compare] Detected removed column 'users.league_id'\nINFO  [alembic.autogenerate.compare] Detected removed column 'users.tenniscores_player_id'\nERROR [alembic.util.messaging] New upgrade operations detected: [('add_table', Table('user_contexts', MetaData(), Column('user_id', Integer(), ForeignKey('users.id'), table=<user_contexts>, primary_key=True, nullable=False), Column('active_league_id', Integer(), ForeignKey('leagues.id'), table=<user_contexts>), Column('active_team_id', Integer(), ForeignKey('teams.id'), table=<user_contexts>), Column('last_updated', DateTime(timezone=True), table=<user_contexts>, onupdate=ColumnElementColumnDefault(<sqlalchemy.sql.functions.now at 0x105e57280; now>), default=ColumnElementColumnDefault(<sqlalchemy.sql.functions.now at 0x105e57250; now>)), schema=None)), ('remove_index', Index('idx_pros_active', Column('is_active', BOOLEAN(), table=<pros>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107d31250>, for_update=False)))), ('remove_table', Table('pros', MetaData(), Column('id', INTEGER(), table=<pros>, primary_key=True, nullable=False), Column('name', VARCHAR(length=255), table=<pros>, nullable=False), Column('bio', TEXT(), table=<pros>), Column('specialties', TEXT(), table=<pros>), Column('hourly_rate', NUMERIC(precision=6, scale=2), table=<pros>), Column('image_url', VARCHAR(length=500), table=<pros>), Column('phone', VARCHAR(length=20), table=<pros>), Column('email', VARCHAR(length=255), table=<pros>), Column('is_active', BOOLEAN(), table=<pros>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107d31250>, for_update=False)), Column('created_at', TIMESTAMP(), table=<pros>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e01640>, for_update=False)), Column('updated_at', TIMESTAMP(), table=<pros>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e01c40>, for_update=False)), schema=None)), ('remove_index', Index('idx_team_format_mappings_active', Column('league_id', VARCHAR(length=50), table=<team_format_mappings>, nullable=False, comment='League identifier (CNSWPL, NSTF, APTA_CHICAGO, CITA)'), Column('is_active', BOOLEAN(), table=<team_format_mappings>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e13040>, for_update=False)))), ('remove_index', Index('idx_team_format_mappings_lookup', Column('league_id', VARCHAR(length=50), table=<team_format_mappings>, nullable=False, comment='League identifier (CNSWPL, NSTF, APTA_CHICAGO, CITA)'), Column('user_input_format', VARCHAR(length=100), table=<team_format_mappings>, nullable=False, comment='Format that users might enter or have in their session data'))), ('remove_table', Table('team_format_mappings', MetaData(), Column('id', INTEGER(), table=<team_format_mappings>, primary_key=True, nullable=False), Column('league_id', VARCHAR(length=50), ForeignKey('leagues.league_id'), table=<team_format_mappings>, nullable=False, comment='League identifier (CNSWPL, NSTF, APTA_CHICAGO, CITA)'), Column('user_input_format', VARCHAR(length=100), table=<team_format_mappings>, nullable=False, comment='Format that users might enter or have in their session data'), Column('database_series_format', VARCHAR(length=100), table=<team_format_mappings>, nullable=False, comment='Actual series format as stored in the database'), Column('mapping_type', VARCHAR(length=50), table=<team_format_mappings>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e01f70>, for_update=False), comment='Type of mapping (series_mapping, team_mapping, etc.)'), Column('description', TEXT(), table=<team_format_mappings>, comment='Human-readable description of this mapping'), Column('is_active', BOOLEAN(), table=<team_format_mappings>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e13040>, for_update=False)), Column('created_at', TIMESTAMP(), table=<team_format_mappings>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e131c0>, for_update=False)), Column('updated_at', TIMESTAMP(), table=<team_format_mappings>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e13280>, for_update=False)), schema=None)), ('remove_index', Index('idx_pro_lessons_lesson_date', Column('lesson_date', DATE(), table=<pro_lessons>, nullable=False))), ('remove_index', Index('idx_pro_lessons_status', Column('status', VARCHAR(length=50), table=<pro_lessons>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e20e20>, for_update=False)))), ('remove_index', Index('idx_pro_lessons_user_email', Column('user_email', VARCHAR(length=255), table=<pro_lessons>, nullable=False))), ('remove_table', Table('pro_lessons', MetaData(), Column('id', INTEGER(), table=<pro_lessons>, primary_key=True, nullable=False), Column('user_email', VARCHAR(length=255), table=<pro_lessons>, nullable=False), Column('pro_id', INTEGER(), ForeignKey('pros.id'), table=<pro_lessons>), Column('lesson_date', DATE(), table=<pro_lessons>, nullable=False), Column('lesson_time', TIME(), table=<pro_lessons>, nullable=False), Column('focus_areas', TEXT(), table=<pro_lessons>, nullable=False), Column('notes', TEXT(), table=<pro_lessons>), Column('status', VARCHAR(length=50), table=<pro_lessons>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e20e20>, for_update=False)), Column('created_at', TIMESTAMP(), table=<pro_lessons>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e26040>, for_update=False)), Column('updated_at', TIMESTAMP(), table=<pro_lessons>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e26160>, for_update=False)), schema=None)), ('remove_index', Index('idx_system_settings_key', Column('key', VARCHAR(length=100), table=<system_settings>, nullable=False))), ('remove_table', Table('system_settings', MetaData(), Column('id', INTEGER(), table=<system_settings>, primary_key=True, nullable=False), Column('key', VARCHAR(length=100), table=<system_settings>, nullable=False), Column('value', TEXT(), table=<system_settings>, nullable=False), Column('description', TEXT(), table=<system_settings>), Column('created_at', TIMESTAMP(), table=<system_settings>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e26730>, for_update=False)), Column('updated_at', TIMESTAMP(), table=<system_settings>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e2f1f0>, for_update=False)), schema=None)), ('remove_index', Index('idx_series_mappings_lookup', Column('league_id', VARCHAR(length=50), table=<series_name_mappings>, nullable=False, comment='League identifier (CNSWPL, NSTF, etc.)'), Column('user_series_name', VARCHAR(length=100), table=<series_name_mappings>, nullable=False, comment='Series name as it appears in user session data'))), ('remove_table', Table('series_name_mappings', MetaData(), Column('id', INTEGER(), table=<series_name_mappings>, primary_key=True, nullable=False), Column('league_id', VARCHAR(length=50), ForeignKey('leagues.league_id'), table=<series_name_mappings>, nullable=False, comment='League identifier (CNSWPL, NSTF, etc.)'), Column('user_series_name', VARCHAR(length=100), table=<series_name_mappings>, nullable=False, comment='Series name as it appears in user session data'), Column('database_series_name', VARCHAR(length=100), table=<series_name_mappings>, nullable=False, comment='Series name as stored in database'), Column('created_at', TIMESTAMP(), table=<series_name_mappings>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e2fe80>, for_update=False)), Column('updated_at', TIMESTAMP(), table=<series_name_mappings>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e2fd60>, for_update=False)), schema=None)), ('add_fk', ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x10e0f64f0>, None, table=Table('activity_log', MetaData(), Column('team_id', NullType(), ForeignKey('teams.id'), table=<activity_log>), schema=None))), ('add_fk', ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x10e0f6590>, None, table=Table('activity_log', MetaData(), Column('player_id', NullType(), ForeignKey('players.id'), table=<activity_log>), schema=None))), ('remove_index', Index('idx_club_leagues_club_id', Column('club_id', INTEGER(), table=<club_leagues>, nullable=False))), ('remove_index', Index('idx_club_leagues_league_id', Column('league_id', INTEGER(), table=<club_leagues>, nullable=False))), ('remove_index', Index('idx_leagues_league_id', Column('league_id', VARCHAR(length=255), table=<leagues>, nullable=False))), ('remove_index', Index('idx_availability_user_date', Column('user_id', INTEGER(), table=<player_availability>), Column('match_date', TIMESTAMP(timezone=True), table=<player_availability>, nullable=False))), ('remove_index', Index('idx_unique_user_date_availability', Column('user_id', INTEGER(), table=<player_availability>), Column('match_date', TIMESTAMP(timezone=True), table=<player_availability>, nullable=False), unique=True)), ('add_constraint', UniqueConstraint(Column('player_name', NullType(), table=<player_availability>), Column('match_date', NullType(), table=<player_availability>), Column('series_id', NullType(), table=<player_availability>))), ('remove_fk', ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x10e0f65e0>, None, name='player_availability_user_id_fkey', table=Table('player_availability', MetaData(), Column('user_id', NullType(), ForeignKey('users.id'), table=<player_availability>), schema=None))), ('add_fk', ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x10e0f6630>, None, table=Table('player_availability', MetaData(), Column('player_id', NullType(), ForeignKey('players.id'), table=<player_availability>), schema=None))), ('add_fk', ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x10e0f6680>, None, table=Table('player_availability', MetaData(), Column('series_id', NullType(), ForeignKey('series.id'), table=<player_availability>), schema=None))), ('remove_column', None, 'player_availability', Column('user_id', INTEGER(), ForeignKey('users.id'), ForeignKey('users.id'), table=<player_availability>)), ('add_fk', ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x10e0f6720>, None, table=Table('player_season_tracking', MetaData(), Column('league_id', NullType(), ForeignKey('leagues.id'), table=<player_season_tracking>), schema=None))), ('add_fk', ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x10e0f66d0>, None, table=Table('poll_responses', MetaData(), Column('player_id', NullType(), ForeignKey('players.id'), table=<poll_responses>), schema=None))), ('add_fk', ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x10e0f6770>, None, table=Table('polls', MetaData(), Column('team_id', NullType(), ForeignKey('teams.id'), table=<polls>), schema=None))), ('remove_constraint', UniqueConstraint(Column('team_name', NullType(), table=<teams>), Column('league_id', NullType(), table=<teams>))), ('remove_column', None, 'user_player_associations', Column('is_primary', BOOLEAN(), table=<user_player_associations>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x107e6d340>, for_update=False))), ('remove_index', Index('idx_users_league_id', Column('league_id', INTEGER(), table=<users>))), ('remove_index', Index('idx_users_tenniscores_player_id', Column('tenniscores_player_id', VARCHAR(length=255), table=<users>))), ('remove_fk', ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x10e0f6860>, None, name='users_league_id_fkey', table=Table('users', MetaData(), Column('league_id', NullType(), ForeignKey('leagues.id'), table=<users>), schema=None))), ('remove_column', None, 'users', Column('league_id', INTEGER(), ForeignKey('leagues.id'), ForeignKey('leagues.id'), table=<users>)), ('remove_column', None, 'users', Column('tenniscores_player_id', VARCHAR(length=255), table=<users>))]\n",
      "tables_count": 28,
      "columns_count": 224,
      "constraints_count": 213,
      "indexes_count": 56,
      "autogeneration_has_changes": false
    },
    "staging": {
      "current_revision": "\u2705 Successfully imported SQLAlchemy models. Found 22 tables in metadata.\n9e89c138eadd (head)",
      "has_pending_migrations": true,
      "pending_output": "\u2705 Successfully imported SQLAlchemy models. Found 22 tables in metadata.\n  FAILED: New upgrade operations detected: [('add_table', Table('user_contexts', MetaData(),\n  Column('user_id', Integer(), ForeignKey('users.id'), table=<user_contexts>, primary_key=True,\n  nullable=False), Column('active_league_id', Integer(), ForeignKey('leagues.id'), table=<user_contexts>),\n  Column('active_team_id', Integer(), ForeignKey('teams.id'), table=<user_contexts>), Column('last_updated',\n  DateTime(timezone=True), table=<user_contexts>,\n  onupdate=ColumnElementColumnDefault(<sqlalchemy.sql.functions.now at 0x1131202b0; now>),\n  default=ColumnElementColumnDefault(<sqlalchemy.sql.functions.now at 0x113120280; now>)), schema=None)),\n  ('remove_table', Table('player_availability_backup', MetaData(), Column('id', INTEGER(),\n  table=<player_availability_backup>), Column('player_name', VARCHAR(length=255),\n  table=<player_availability_backup>), Column('availability_status', INTEGER(),\n  table=<player_availability_backup>), Column('updated_at', TIMESTAMP(timezone=True),\n  table=<player_availability_backup>), Column('series_id', INTEGER(), table=<player_availability_backup>),\n  Column('match_date', TIMESTAMP(timezone=True), table=<player_availability_backup>), Column('player_id',\n  INTEGER(), table=<player_availability_backup>), Column('notes', TEXT(),\n  table=<player_availability_backup>), Column('user_id', INTEGER(), table=<player_availability_backup>),\n  schema=None)), ('remove_index', Index('idx_pro_lessons_lesson_date', Column('lesson_date', DATE(),\n  table=<pro_lessons>, nullable=False))), ('remove_index', Index('idx_pro_lessons_status', Column('status',\n  VARCHAR(length=50), table=<pro_lessons>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause\n  object at 0x115d04f10>, for_update=False)))), ('remove_index', Index('idx_pro_lessons_user_email',\n  Column('user_email', VARCHAR(length=255), table=<pro_lessons>, nullable=False))), ('remove_table',\n  Table('pro_lessons', MetaData(), Column('id', INTEGER(), table=<pro_lessons>, primary_key=True,\n  nullable=False), Column('user_email', VARCHAR(length=255), table=<pro_lessons>, nullable=False),\n  Column('pro_id', INTEGER(), ForeignKey('pros.id'), table=<pro_lessons>), Column('lesson_date', DATE(),\n  table=<pro_lessons>, nullable=False), Column('lesson_time', TIME(), table=<pro_lessons>, nullable=False),\n  Column('focus_areas', TEXT(), table=<pro_lessons>, nullable=False), Column('notes', TEXT(),\n  table=<pro_lessons>), Column('status', VARCHAR(length=50), table=<pro_lessons>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d04f10>,\n  for_update=False)), Column('created_at', TIMESTAMP(), table=<pro_lessons>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d04e80>,\n  for_update=False)), Column('updated_at', TIMESTAMP(), table=<pro_lessons>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d04c40>,\n  for_update=False)), schema=None)), ('remove_index', Index('idx_system_settings_key', Column('key',\n  VARCHAR(length=100), table=<system_settings>, nullable=False))), ('remove_table', Table('system_settings',\n  MetaData(), Column('id', INTEGER(), table=<system_settings>, primary_key=True, nullable=False),\n  Column('key', VARCHAR(length=100), table=<system_settings>, nullable=False), Column('value', TEXT(),\n  table=<system_settings>, nullable=False), Column('description', TEXT(), table=<system_settings>),\n  Column('created_at', TIMESTAMP(), table=<system_settings>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d1d850>,\n  for_update=False)), Column('updated_at', TIMESTAMP(), table=<system_settings>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d1d790>,\n  for_update=False)), schema=None)), ('remove_table', Table('user_player_associations_backup', MetaData(),\n  Column('user_id', INTEGER(), table=<user_player_associations_backup>), Column('is_primary', BOOLEAN(),\n  table=<user_player_associations_backup>), Column('created_at', TIMESTAMP(timezone=True),\n  table=<user_player_associations_backup>), Column('tenniscores_player_id', VARCHAR(length=255),\n  table=<user_player_associations_backup>), schema=None)), ('remove_index',\n  Index('idx_team_format_mappings_active', Column('league_id', VARCHAR(length=50),\n  table=<team_format_mappings>, nullable=False, comment='League identifier (CNSWPL, NSTF, APTA_CHICAGO,\n  CITA)'), Column('is_active', BOOLEAN(), table=<team_format_mappings>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d24b20>,\n  for_update=False)))), ('remove_index', Index('idx_team_format_mappings_lookup', Column('league_id',\n  VARCHAR(length=50), table=<team_format_mappings>, nullable=False, comment='League identifier (CNSWPL,\n  NSTF, APTA_CHICAGO, CITA)'), Column('user_input_format', VARCHAR(length=100),\n  table=<team_format_mappings>, nullable=False, comment='Format that users might enter or have in their\n  session data'))), ('remove_table', Table('team_format_mappings', MetaData(), Column('id', INTEGER(),\n  table=<team_format_mappings>, primary_key=True, nullable=False), Column('league_id', VARCHAR(length=50),\n  ForeignKey('leagues.league_id'), table=<team_format_mappings>, nullable=False, comment='League identifier\n  (CNSWPL, NSTF, APTA_CHICAGO, CITA)'), Column('user_input_format', VARCHAR(length=100),\n  table=<team_format_mappings>, nullable=False, comment='Format that users might enter or have in their\n  session data'), Column('database_series_format', VARCHAR(length=100), table=<team_format_mappings>,\n  nullable=False, comment='Actual series format as stored in the database'), Column('mapping_type',\n  VARCHAR(length=50), table=<team_format_mappings>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d24c40>,\n  for_update=False), comment='Type of mapping (series_mapping, team_mapping, etc.)'), Column('description',\n  TEXT(), table=<team_format_mappings>, comment='Human-readable description of this mapping'),\n  Column('is_active', BOOLEAN(), table=<team_format_mappings>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d24b20>,\n  for_update=False)), Column('created_at', TIMESTAMP(), table=<team_format_mappings>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d24bb0>,\n  for_update=False)), Column('updated_at', TIMESTAMP(), table=<team_format_mappings>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d24eb0>,\n  for_update=False)), schema=None)), ('remove_index', Index('idx_pros_active', Column('is_active',\n  BOOLEAN(), table=<pros>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at\n  0x115d11790>, for_update=False)))), ('remove_table', Table('pros', MetaData(), Column('id', INTEGER(),\n  table=<pros>, primary_key=True, nullable=False,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d04040>,\n  for_update=False)), Column('name', VARCHAR(length=255), table=<pros>, nullable=False), Column('bio',\n  TEXT(), table=<pros>), Column('specialties', TEXT(), table=<pros>), Column('hourly_rate',\n  NUMERIC(precision=6, scale=2), table=<pros>), Column('image_url', VARCHAR(length=500), table=<pros>),\n  Column('phone', VARCHAR(length=20), table=<pros>), Column('email', VARCHAR(length=255), table=<pros>),\n  Column('is_active', BOOLEAN(), table=<pros>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d11790>,\n  for_update=False)), Column('created_at', TIMESTAMP(), table=<pros>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d118e0>,\n  for_update=False)), Column('updated_at', TIMESTAMP(), table=<pros>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d119a0>,\n  for_update=False)), schema=None)), ('remove_table', Table('user_league_contexts_backup', MetaData(),\n  Column('user_id', INTEGER(), table=<user_league_contexts_backup>), Column('email', VARCHAR(length=255),\n  table=<user_league_contexts_backup>), Column('first_name', VARCHAR(length=255),\n  table=<user_league_contexts_backup>), Column('last_name', VARCHAR(length=255),\n  table=<user_league_contexts_backup>), Column('league_context', INTEGER(),\n  table=<user_league_contexts_backup>), Column('league_string_id', VARCHAR(length=255),\n  table=<user_league_contexts_backup>), Column('league_name', VARCHAR(length=255),\n  table=<user_league_contexts_backup>), schema=None)), ('remove_index', Index('idx_series_mappings_lookup',\n  Column('league_id', VARCHAR(length=50), table=<series_name_mappings>, nullable=False, comment='League\n  identifier (CNSWPL, NSTF, etc.)'), Column('user_series_name', VARCHAR(length=100),\n  table=<series_name_mappings>, nullable=False, comment='Series name as it appears in user session data'))),\n  ('remove_table', Table('series_name_mappings', MetaData(), Column('id', INTEGER(),\n  table=<series_name_mappings>, primary_key=True, nullable=False), Column('league_id', VARCHAR(length=50),\n  ForeignKey('leagues.league_id'), table=<series_name_mappings>, nullable=False, comment='League identifier\n  (CNSWPL, NSTF, etc.)'), Column('user_series_name', VARCHAR(length=100), table=<series_name_mappings>,\n  nullable=False, comment='Series name as it appears in user session data'), Column('database_series_name',\n  VARCHAR(length=100), table=<series_name_mappings>, nullable=False, comment='Series name as stored in\n  database'), Column('created_at', TIMESTAMP(), table=<series_name_mappings>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d444c0>,\n  for_update=False)), Column('updated_at', TIMESTAMP(), table=<series_name_mappings>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d442e0>,\n  for_update=False)), schema=None)), ('add_fk',\n  ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x115fad540>, None,\n  table=Table('activity_log', MetaData(), Column('player_id', NullType(), ForeignKey('players.id'),\n  table=<activity_log>), schema=None))), ('add_fk',\n  ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x115fad4f0>, None,\n  table=Table('activity_log', MetaData(), Column('team_id', NullType(), ForeignKey('teams.id'),\n  table=<activity_log>), schema=None))), ('remove_index', Index('idx_club_leagues_club_id',\n  Column('club_id', INTEGER(), table=<club_leagues>, nullable=False))), ('remove_index',\n  Index('idx_club_leagues_league_id', Column('league_id', INTEGER(), table=<club_leagues>,\n  nullable=False))), ('remove_index', Index('idx_leagues_league_id', Column('league_id',\n  VARCHAR(length=255), table=<leagues>, nullable=False))), ('remove_index',\n  Index('idx_availability_user_date', Column('user_id', INTEGER(), table=<player_availability>),\n  Column('match_date', TIMESTAMP(timezone=True), table=<player_availability>, nullable=False))),\n  ('remove_index', Index('idx_unique_user_date_availability', Column('user_id', INTEGER(),\n  table=<player_availability>), Column('match_date', TIMESTAMP(timezone=True), table=<player_availability>,\n  nullable=False), unique=True)), ('add_constraint', UniqueConstraint(Column('player_name', NullType(),\n  table=<player_availability>), Column('match_date', NullType(), table=<player_availability>),\n  Column('series_id', NullType(), table=<player_availability>))), ('remove_fk',\n  ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x115fad450>, None,\n  name='player_availability_user_id_fkey', table=Table('player_availability', MetaData(), Column('user_id',\n  NullType(), ForeignKey('users.id'), table=<player_availability>), schema=None))), ('add_fk',\n  ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x115fad310>, None,\n  table=Table('player_availability', MetaData(), Column('series_id', NullType(), ForeignKey('series.id'),\n  table=<player_availability>), schema=None))), ('add_fk',\n  ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x115fad3b0>, None,\n  table=Table('player_availability', MetaData(), Column('player_id', NullType(), ForeignKey('players.id'),\n  table=<player_availability>), schema=None))), ('remove_column', None, 'player_availability',\n  Column('user_id', INTEGER(), ForeignKey('users.id'), ForeignKey('users.id'),\n  table=<player_availability>)), ('add_fk',\n  ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x115fad0e0>, None,\n  table=Table('player_season_tracking', MetaData(), Column('league_id', NullType(),\n  ForeignKey('leagues.id'), table=<player_season_tracking>), schema=None))), ('add_fk',\n  ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x115fad400>, None,\n  table=Table('poll_responses', MetaData(), Column('player_id', NullType(), ForeignKey('players.id'),\n  table=<poll_responses>), schema=None))), ('add_fk',\n  ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x115fad130>, None,\n  table=Table('polls', MetaData(), Column('team_id', NullType(), ForeignKey('teams.id'), table=<polls>),\n  schema=None))), ('remove_constraint', UniqueConstraint(Column('team_name', NullType(), table=<teams>),\n  Column('league_id', NullType(), table=<teams>))), ('remove_column', None, 'user_player_associations',\n  Column('is_primary', BOOLEAN(), table=<user_player_associations>,\n  server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115da0700>,\n  for_update=False))), ('remove_index', Index('idx_users_league_id', Column('league_id', INTEGER(),\n  table=<users>))), ('remove_index', Index('idx_users_tenniscores_player_id',\n  Column('tenniscores_player_id', VARCHAR(length=255), table=<users>))), ('add_fk',\n  ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x117815860>, None,\n  table=Table('users', MetaData(), Column('league_context', NullType(), ForeignKey('leagues.id'),\n  table=<users>), schema=None))), ('remove_column', None, 'users', Column('tenniscores_player_id',\n  VARCHAR(length=255), table=<users>)), ('remove_column', None, 'users', Column('league_id', INTEGER(),\n  table=<users>))]\nINFO:database_config:Using database URL with host: localhost:5432\nINFO:database_config:Created SQLAlchemy engine for database\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.autogenerate.compare] Detected added table 'user_contexts'\nINFO  [alembic.autogenerate.compare] Detected removed table 'player_availability_backup'\nINFO  [alembic.ddl.postgresql] Detected sequence named 'pro_lessons_id_seq' as owned by integer column 'pro_lessons(id)', assuming SERIAL and omitting\nINFO  [alembic.autogenerate.compare] Detected removed index 'idx_pro_lessons_lesson_date' on 'pro_lessons'\nINFO  [alembic.autogenerate.compare] Detected removed index 'idx_pro_lessons_status' on 'pro_lessons'\nINFO  [alembic.autogenerate.compare] Detected removed index 'idx_pro_lessons_user_email' on 'pro_lessons'\nINFO  [alembic.autogenerate.compare] Detected removed table 'pro_lessons'\nINFO  [alembic.ddl.postgresql] Detected sequence named 'system_settings_id_seq' as owned by integer column 'system_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.autogenerate.compare] Detected removed index 'idx_system_settings_key' on 'system_settings'\nINFO  [alembic.autogenerate.compare] Detected removed table 'system_settings'\nINFO  [alembic.autogenerate.compare] Detected removed table 'user_player_associations_backup'\nINFO  [alembic.ddl.postgresql] Detected sequence named 'team_format_mappings_id_seq' as owned by integer column 'team_format_mappings(id)', assuming SERIAL and omitting\nINFO  [alembic.autogenerate.compare] Detected removed index 'idx_team_format_mappings_active' on 'team_format_mappings'\nINFO  [alembic.autogenerate.compare] Detected removed index 'idx_team_format_mappings_lookup' on 'team_format_mappings'\nINFO  [alembic.autogenerate.compare] Detected removed table 'team_format_mappings'\nINFO  [alembic.autogenerate.compare] Detected removed index 'idx_pros_active' on 'pros'\nINFO  [alembic.autogenerate.compare] Detected removed table 'pros'\nINFO  [alembic.autogenerate.compare] Detected removed table 'user_league_contexts_backup'\nINFO  [alembic.ddl.postgresql] Detected sequence named 'series_name_mappings_id_seq' as owned by integer column 'series_name_mappings(id)', assuming SERIAL and omitting\nINFO  [alembic.autogenerate.compare] Detected removed index 'idx_series_mappings_lookup' on 'series_name_mappings'\nINFO  [alembic.autogenerate.compare] Detected removed table 'series_name_mappings'\nINFO  [alembic.ddl.postgresql] Detected sequence named 'users_id_seq' as owned by integer column 'players(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'player_history_id_seq' as owned by integer column 'player_history(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'poll_responses_id_seq' as owned by integer column 'poll_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'series_stats_id_seq' as owned by integer column 'series_stats(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'schedule_id_seq' as owned by integer column 'schedule(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'player_season_tracking_id_seq' as owned by integer column 'player_season_tracking(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'match_scores_id_seq' as owned by integer column 'match_scores(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_instructions_id_seq' as owned by integer column 'user_instructions(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'player_availability_id_seq' as owned by integer column 'player_availability(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'club_leagues_id_seq' as owned by integer column 'club_leagues(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'series_leagues_id_seq' as owned by integer column 'series_leagues(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_activity_logs_id_seq' as owned by integer column 'user_activity_logs(id)', assuming SERIAL and omitting\nINFO  [alembic.autogenerate.compare] Detected added foreign key (player_id)(id) on table activity_log\nINFO  [alembic.autogenerate.compare] Detected added foreign key (team_id)(id) on table activity_log\nINFO  [alembic.autogenerate.compare] Detected removed index 'idx_club_leagues_club_id' on 'club_leagues'\nINFO  [alembic.autogenerate.compare] Detected removed index 'idx_club_leagues_league_id' on 'club_leagues'\nINFO  [alembic.autogenerate.compare] Detected removed index 'idx_leagues_league_id' on 'leagues'\nINFO  [alembic.autogenerate.compare] Detected removed index 'idx_availability_user_date' on 'player_availability'\nINFO  [alembic.autogenerate.compare] Detected removed index 'idx_unique_user_date_availability' on 'player_availability'\nINFO  [alembic.autogenerate.compare] Detected added unique constraint 'unique_player_availability' on '('player_name', 'match_date', 'series_id')'\nINFO  [alembic.autogenerate.compare] Detected removed foreign key (user_id)(id) on table player_availability\nINFO  [alembic.autogenerate.compare] Detected added foreign key (series_id)(id) on table player_availability\nINFO  [alembic.autogenerate.compare] Detected added foreign key (player_id)(id) on table player_availability\nINFO  [alembic.autogenerate.compare] Detected removed column 'player_availability.user_id'\nINFO  [alembic.autogenerate.compare] Detected added foreign key (league_id)(id) on table player_season_tracking\nINFO  [alembic.autogenerate.compare] Detected added foreign key (player_id)(id) on table poll_responses\nINFO  [alembic.autogenerate.compare] Detected added foreign key (team_id)(id) on table polls\nINFO  [alembic.autogenerate.compare] Detected removed unique constraint 'unique_team_name_per_league' on 'teams'\nINFO  [alembic.autogenerate.compare] Detected removed column 'user_player_associations.is_primary'\nINFO  [alembic.autogenerate.compare] Detected removed index 'idx_users_league_id' on 'users'\nINFO  [alembic.autogenerate.compare] Detected removed index 'idx_users_tenniscores_player_id' on 'users'\nINFO  [alembic.autogenerate.compare] Detected added foreign key (league_context)(id) on table users\nINFO  [alembic.autogenerate.compare] Detected removed column 'users.tenniscores_player_id'\nINFO  [alembic.autogenerate.compare] Detected removed column 'users.league_id'\nERROR [alembic.util.messaging] New upgrade operations detected: [('add_table', Table('user_contexts', MetaData(), Column('user_id', Integer(), ForeignKey('users.id'), table=<user_contexts>, primary_key=True, nullable=False), Column('active_league_id', Integer(), ForeignKey('leagues.id'), table=<user_contexts>), Column('active_team_id', Integer(), ForeignKey('teams.id'), table=<user_contexts>), Column('last_updated', DateTime(timezone=True), table=<user_contexts>, onupdate=ColumnElementColumnDefault(<sqlalchemy.sql.functions.now at 0x1131202b0; now>), default=ColumnElementColumnDefault(<sqlalchemy.sql.functions.now at 0x113120280; now>)), schema=None)), ('remove_table', Table('player_availability_backup', MetaData(), Column('id', INTEGER(), table=<player_availability_backup>), Column('player_name', VARCHAR(length=255), table=<player_availability_backup>), Column('availability_status', INTEGER(), table=<player_availability_backup>), Column('updated_at', TIMESTAMP(timezone=True), table=<player_availability_backup>), Column('series_id', INTEGER(), table=<player_availability_backup>), Column('match_date', TIMESTAMP(timezone=True), table=<player_availability_backup>), Column('player_id', INTEGER(), table=<player_availability_backup>), Column('notes', TEXT(), table=<player_availability_backup>), Column('user_id', INTEGER(), table=<player_availability_backup>), schema=None)), ('remove_index', Index('idx_pro_lessons_lesson_date', Column('lesson_date', DATE(), table=<pro_lessons>, nullable=False))), ('remove_index', Index('idx_pro_lessons_status', Column('status', VARCHAR(length=50), table=<pro_lessons>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d04f10>, for_update=False)))), ('remove_index', Index('idx_pro_lessons_user_email', Column('user_email', VARCHAR(length=255), table=<pro_lessons>, nullable=False))), ('remove_table', Table('pro_lessons', MetaData(), Column('id', INTEGER(), table=<pro_lessons>, primary_key=True, nullable=False), Column('user_email', VARCHAR(length=255), table=<pro_lessons>, nullable=False), Column('pro_id', INTEGER(), ForeignKey('pros.id'), table=<pro_lessons>), Column('lesson_date', DATE(), table=<pro_lessons>, nullable=False), Column('lesson_time', TIME(), table=<pro_lessons>, nullable=False), Column('focus_areas', TEXT(), table=<pro_lessons>, nullable=False), Column('notes', TEXT(), table=<pro_lessons>), Column('status', VARCHAR(length=50), table=<pro_lessons>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d04f10>, for_update=False)), Column('created_at', TIMESTAMP(), table=<pro_lessons>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d04e80>, for_update=False)), Column('updated_at', TIMESTAMP(), table=<pro_lessons>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d04c40>, for_update=False)), schema=None)), ('remove_index', Index('idx_system_settings_key', Column('key', VARCHAR(length=100), table=<system_settings>, nullable=False))), ('remove_table', Table('system_settings', MetaData(), Column('id', INTEGER(), table=<system_settings>, primary_key=True, nullable=False), Column('key', VARCHAR(length=100), table=<system_settings>, nullable=False), Column('value', TEXT(), table=<system_settings>, nullable=False), Column('description', TEXT(), table=<system_settings>), Column('created_at', TIMESTAMP(), table=<system_settings>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d1d850>, for_update=False)), Column('updated_at', TIMESTAMP(), table=<system_settings>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d1d790>, for_update=False)), schema=None)), ('remove_table', Table('user_player_associations_backup', MetaData(), Column('user_id', INTEGER(), table=<user_player_associations_backup>), Column('is_primary', BOOLEAN(), table=<user_player_associations_backup>), Column('created_at', TIMESTAMP(timezone=True), table=<user_player_associations_backup>), Column('tenniscores_player_id', VARCHAR(length=255), table=<user_player_associations_backup>), schema=None)), ('remove_index', Index('idx_team_format_mappings_active', Column('league_id', VARCHAR(length=50), table=<team_format_mappings>, nullable=False, comment='League identifier (CNSWPL, NSTF, APTA_CHICAGO, CITA)'), Column('is_active', BOOLEAN(), table=<team_format_mappings>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d24b20>, for_update=False)))), ('remove_index', Index('idx_team_format_mappings_lookup', Column('league_id', VARCHAR(length=50), table=<team_format_mappings>, nullable=False, comment='League identifier (CNSWPL, NSTF, APTA_CHICAGO, CITA)'), Column('user_input_format', VARCHAR(length=100), table=<team_format_mappings>, nullable=False, comment='Format that users might enter or have in their session data'))), ('remove_table', Table('team_format_mappings', MetaData(), Column('id', INTEGER(), table=<team_format_mappings>, primary_key=True, nullable=False), Column('league_id', VARCHAR(length=50), ForeignKey('leagues.league_id'), table=<team_format_mappings>, nullable=False, comment='League identifier (CNSWPL, NSTF, APTA_CHICAGO, CITA)'), Column('user_input_format', VARCHAR(length=100), table=<team_format_mappings>, nullable=False, comment='Format that users might enter or have in their session data'), Column('database_series_format', VARCHAR(length=100), table=<team_format_mappings>, nullable=False, comment='Actual series format as stored in the database'), Column('mapping_type', VARCHAR(length=50), table=<team_format_mappings>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d24c40>, for_update=False), comment='Type of mapping (series_mapping, team_mapping, etc.)'), Column('description', TEXT(), table=<team_format_mappings>, comment='Human-readable description of this mapping'), Column('is_active', BOOLEAN(), table=<team_format_mappings>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d24b20>, for_update=False)), Column('created_at', TIMESTAMP(), table=<team_format_mappings>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d24bb0>, for_update=False)), Column('updated_at', TIMESTAMP(), table=<team_format_mappings>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d24eb0>, for_update=False)), schema=None)), ('remove_index', Index('idx_pros_active', Column('is_active', BOOLEAN(), table=<pros>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d11790>, for_update=False)))), ('remove_table', Table('pros', MetaData(), Column('id', INTEGER(), table=<pros>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d04040>, for_update=False)), Column('name', VARCHAR(length=255), table=<pros>, nullable=False), Column('bio', TEXT(), table=<pros>), Column('specialties', TEXT(), table=<pros>), Column('hourly_rate', NUMERIC(precision=6, scale=2), table=<pros>), Column('image_url', VARCHAR(length=500), table=<pros>), Column('phone', VARCHAR(length=20), table=<pros>), Column('email', VARCHAR(length=255), table=<pros>), Column('is_active', BOOLEAN(), table=<pros>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d11790>, for_update=False)), Column('created_at', TIMESTAMP(), table=<pros>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d118e0>, for_update=False)), Column('updated_at', TIMESTAMP(), table=<pros>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d119a0>, for_update=False)), schema=None)), ('remove_table', Table('user_league_contexts_backup', MetaData(), Column('user_id', INTEGER(), table=<user_league_contexts_backup>), Column('email', VARCHAR(length=255), table=<user_league_contexts_backup>), Column('first_name', VARCHAR(length=255), table=<user_league_contexts_backup>), Column('last_name', VARCHAR(length=255), table=<user_league_contexts_backup>), Column('league_context', INTEGER(), table=<user_league_contexts_backup>), Column('league_string_id', VARCHAR(length=255), table=<user_league_contexts_backup>), Column('league_name', VARCHAR(length=255), table=<user_league_contexts_backup>), schema=None)), ('remove_index', Index('idx_series_mappings_lookup', Column('league_id', VARCHAR(length=50), table=<series_name_mappings>, nullable=False, comment='League identifier (CNSWPL, NSTF, etc.)'), Column('user_series_name', VARCHAR(length=100), table=<series_name_mappings>, nullable=False, comment='Series name as it appears in user session data'))), ('remove_table', Table('series_name_mappings', MetaData(), Column('id', INTEGER(), table=<series_name_mappings>, primary_key=True, nullable=False), Column('league_id', VARCHAR(length=50), ForeignKey('leagues.league_id'), table=<series_name_mappings>, nullable=False, comment='League identifier (CNSWPL, NSTF, etc.)'), Column('user_series_name', VARCHAR(length=100), table=<series_name_mappings>, nullable=False, comment='Series name as it appears in user session data'), Column('database_series_name', VARCHAR(length=100), table=<series_name_mappings>, nullable=False, comment='Series name as stored in database'), Column('created_at', TIMESTAMP(), table=<series_name_mappings>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d444c0>, for_update=False)), Column('updated_at', TIMESTAMP(), table=<series_name_mappings>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115d442e0>, for_update=False)), schema=None)), ('add_fk', ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x115fad540>, None, table=Table('activity_log', MetaData(), Column('player_id', NullType(), ForeignKey('players.id'), table=<activity_log>), schema=None))), ('add_fk', ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x115fad4f0>, None, table=Table('activity_log', MetaData(), Column('team_id', NullType(), ForeignKey('teams.id'), table=<activity_log>), schema=None))), ('remove_index', Index('idx_club_leagues_club_id', Column('club_id', INTEGER(), table=<club_leagues>, nullable=False))), ('remove_index', Index('idx_club_leagues_league_id', Column('league_id', INTEGER(), table=<club_leagues>, nullable=False))), ('remove_index', Index('idx_leagues_league_id', Column('league_id', VARCHAR(length=255), table=<leagues>, nullable=False))), ('remove_index', Index('idx_availability_user_date', Column('user_id', INTEGER(), table=<player_availability>), Column('match_date', TIMESTAMP(timezone=True), table=<player_availability>, nullable=False))), ('remove_index', Index('idx_unique_user_date_availability', Column('user_id', INTEGER(), table=<player_availability>), Column('match_date', TIMESTAMP(timezone=True), table=<player_availability>, nullable=False), unique=True)), ('add_constraint', UniqueConstraint(Column('player_name', NullType(), table=<player_availability>), Column('match_date', NullType(), table=<player_availability>), Column('series_id', NullType(), table=<player_availability>))), ('remove_fk', ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x115fad450>, None, name='player_availability_user_id_fkey', table=Table('player_availability', MetaData(), Column('user_id', NullType(), ForeignKey('users.id'), table=<player_availability>), schema=None))), ('add_fk', ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x115fad310>, None, table=Table('player_availability', MetaData(), Column('series_id', NullType(), ForeignKey('series.id'), table=<player_availability>), schema=None))), ('add_fk', ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x115fad3b0>, None, table=Table('player_availability', MetaData(), Column('player_id', NullType(), ForeignKey('players.id'), table=<player_availability>), schema=None))), ('remove_column', None, 'player_availability', Column('user_id', INTEGER(), ForeignKey('users.id'), ForeignKey('users.id'), table=<player_availability>)), ('add_fk', ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x115fad0e0>, None, table=Table('player_season_tracking', MetaData(), Column('league_id', NullType(), ForeignKey('leagues.id'), table=<player_season_tracking>), schema=None))), ('add_fk', ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x115fad400>, None, table=Table('poll_responses', MetaData(), Column('player_id', NullType(), ForeignKey('players.id'), table=<poll_responses>), schema=None))), ('add_fk', ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x115fad130>, None, table=Table('polls', MetaData(), Column('team_id', NullType(), ForeignKey('teams.id'), table=<polls>), schema=None))), ('remove_constraint', UniqueConstraint(Column('team_name', NullType(), table=<teams>), Column('league_id', NullType(), table=<teams>))), ('remove_column', None, 'user_player_associations', Column('is_primary', BOOLEAN(), table=<user_player_associations>, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x115da0700>, for_update=False))), ('remove_index', Index('idx_users_league_id', Column('league_id', INTEGER(), table=<users>))), ('remove_index', Index('idx_users_tenniscores_player_id', Column('tenniscores_player_id', VARCHAR(length=255), table=<users>))), ('add_fk', ForeignKeyConstraint(<sqlalchemy.sql.base.ReadOnlyColumnCollection object at 0x117815860>, None, table=Table('users', MetaData(), Column('league_context', NullType(), ForeignKey('leagues.id'), table=<users>), schema=None))), ('remove_column', None, 'users', Column('tenniscores_player_id', VARCHAR(length=255), table=<users>)), ('remove_column', None, 'users', Column('league_id', INTEGER(), table=<users>))]\n",
      "tables_count": 28,
      "columns_count": 224,
      "constraints_count": 213,
      "indexes_count": 56,
      "autogeneration_has_changes": false
    }
  },
  "comparison": {
    "revisions_match": true,
    "schema_differences": {
      "tables": {
        "missing_in_staging": [],
        "missing_in_local": [],
        "different": []
      },
      "columns": {
        "missing_in_staging": [],
        "missing_in_local": [],
        "different": []
      },
      "constraints": {
        "missing_in_staging": [],
        "missing_in_local": [],
        "different": []
      },
      "indexes": {
        "missing_in_staging": [],
        "missing_in_local": [],
        "different": []
      },
      "sequences": {
        "missing_in_staging": [],
        "missing_in_local": [],
        "different": []
      }
    },
    "schemas_match": true,
    "total_differences": 0
  },
  "summary": {
    "revisions_match": true,
    "schemas_match": true,
    "autogeneration_clean": true,
    "overall_perfect_match": true
  }
}
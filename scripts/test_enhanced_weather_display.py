#!/usr/bin/env python3
"""
Test script to verify enhanced weather display with color coding and detailed information
"""

import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.services.weather_service import WeatherService, WeatherForecast
from datetime import datetime, timedelta
from dotenv import load_dotenv

load_dotenv()

def test_enhanced_weather_methods():
    """Test the new enhanced weather methods"""
    print("=== Testing Enhanced Weather Methods ===")
    
    weather_service = WeatherService()
    
    # Create test forecasts for different weather conditions
    test_forecasts = [
        WeatherForecast(
            date="2025-07-19",
            temperature_high=75.0,
            temperature_low=65.0,
            condition="Clear",
            condition_code="01d",
            precipitation_chance=10.0,
            wind_speed=8.0,
            humidity=60.0,
            icon="01d"
        ),
        WeatherForecast(
            date="2025-07-19",
            temperature_high=85.0,
            temperature_low=70.0,
            condition="Clouds",
            condition_code="02d",
            precipitation_chance=5.0,
            wind_speed=12.0,
            humidity=55.0,
            icon="02d"
        ),
        WeatherForecast(
            date="2025-07-19",
            temperature_high=60.0,
            temperature_low=45.0,
            condition="Rain",
            condition_code="10d",
            precipitation_chance=80.0,
            wind_speed=20.0,
            humidity=85.0,
            icon="10d"
        ),
        WeatherForecast(
            date="2025-07-19",
            temperature_high=95.0,
            temperature_low=80.0,
            condition="Clear",
            condition_code="01d",
            precipitation_chance=0.0,
            wind_speed=5.0,
            humidity=40.0,
            icon="01d"
        )
    ]
    
    for i, forecast in enumerate(test_forecasts, 1):
        print(f"\n--- Test Forecast {i} ---")
        print(f"Condition: {forecast.condition}")
        print(f"Temperature: {forecast.temperature_high}¬∞F/{forecast.temperature_low}¬∞F")
        print(f"Precipitation: {forecast.precipitation_chance}%")
        print(f"Wind: {forecast.wind_speed} mph")
        print(f"Humidity: {forecast.humidity}%")
        
        # Test enhanced methods
        quality = weather_service.get_weather_quality(forecast)
        description = weather_service.get_weather_description(forecast)
        emoji = weather_service.get_weather_emoji(forecast)
        formatted = weather_service.format_weather_message(forecast)
        
        print(f"Quality: {quality}")
        print(f"Description: {description}")
        print(f"Emoji: {emoji}")
        print(f"Formatted: {formatted}")
        
        # Show color coding
        color_map = {
            'good': 'üü¢ Green (Good weather)',
            'moderate': 'üü° Yellow (Moderate weather)',
            'bad': 'üî¥ Red (Bad weather)'
        }
        print(f"Color: {color_map.get(quality, 'Unknown')}")

def test_notification_data_structure():
    """Test the enhanced notification data structure"""
    print("\n=== Testing Enhanced Notification Data Structure ===")
    
    weather_service = WeatherService()
    
    # Create mock weather data
    mock_forecast = WeatherForecast(
        date="2025-07-19",
        temperature_high=75.0,
        temperature_low=65.0,
        condition="Clear",
        condition_code="01d",
        precipitation_chance=10.0,
        wind_speed=8.0,
        humidity=60.0,
        icon="01d"
    )
    
    # Simulate the enhanced weather data structure
    enhanced_weather_data = {
        "practice_123": {
            'date': mock_forecast.date,
            'temperature_high': mock_forecast.temperature_high,
            'temperature_low': mock_forecast.temperature_low,
            'condition': mock_forecast.condition,
            'condition_code': mock_forecast.condition_code,
            'precipitation_chance': mock_forecast.precipitation_chance,
            'wind_speed': mock_forecast.wind_speed,
            'humidity': mock_forecast.humidity,
            'icon': mock_forecast.icon,
            'quality': weather_service.get_weather_quality(mock_forecast),
            'description': weather_service.get_weather_description(mock_forecast),
            'emoji': weather_service.get_weather_emoji(mock_forecast)
        }
    }
    
    print("Enhanced notification data structure:")
    import json
    print(json.dumps(enhanced_weather_data, indent=2))

def test_frontend_display_logic():
    """Test the frontend display logic"""
    print("\n=== Testing Frontend Display Logic ===")
    
    # Simulate the frontend weather data
    mock_weather_data = {
        "practice_123": {
            "icon": "01d",
            "temperature_high": 75.0,
            "temperature_low": 65.0,
            "condition": "Clear",
            "quality": "good",
            "description": "Warm, Clear skies",
            "emoji": "‚òÄÔ∏è"
        },
        "match_456": {
            "icon": "10d",
            "temperature_high": 60.0,
            "temperature_low": 45.0,
            "condition": "Rain",
            "quality": "bad",
            "description": "Cool, Rainy, 80% chance of rain",
            "emoji": "üåßÔ∏è"
        }
    }
    
    print("Frontend would generate these weather cards:")
    
    for key, forecast in mock_weather_data.items():
        quality = forecast['quality']
        temp_high = round(forecast['temperature_high'])
        temp_low = round(forecast['temperature_low'])
        description = forecast['description']
        emoji = forecast['emoji']
        
        # Color coding
        color_info = {
            'good': 'üü¢ Green background, green text',
            'moderate': 'üü° Yellow background, yellow text', 
            'bad': 'üî¥ Red background, red text'
        }
        
        print(f"\n{key}:")
        print(f"  {emoji} {temp_high}¬∞/{temp_low}¬∞")
        print(f"  {description}")
        print(f"  {color_info.get(quality, 'Unknown color')}")

def main():
    """Main test function"""
    print("Enhanced Weather Display Test")
    print("=" * 50)
    
    # Test enhanced weather methods
    test_enhanced_weather_methods()
    
    # Test notification data structure
    test_notification_data_structure()
    
    # Test frontend display logic
    test_frontend_display_logic()
    
    print("\n=== Summary ===")
    print("‚úÖ Enhanced weather methods working")
    print("‚úÖ Color coding: Green (good), Yellow (moderate), Red (bad)")
    print("‚úÖ Detailed descriptions with temperature, conditions, precipitation, wind")
    print("‚úÖ Weather emojis for visual appeal")
    print("‚úÖ Frontend will display rich weather cards with color coding")

if __name__ == "__main__":
    main() 
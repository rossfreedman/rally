"""baseline_current_schema

Revision ID: 9c634037d8ef
Revises:
Create Date: 2025-06-11 08:59:43.330178

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "9c634037d8ef"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "club_leagues",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_constraint(
        "club_leagues_club_id_league_id_key", "club_leagues", type_="unique"
    )
    op.drop_index("idx_club_leagues_club_id", table_name="club_leagues")
    op.drop_index("idx_club_leagues_league_id", table_name="club_leagues")
    op.create_unique_constraint(
        "unique_club_league", "club_leagues", ["club_id", "league_id"]
    )
    op.drop_constraint("club_leagues_club_id_fkey", "club_leagues", type_="foreignkey")
    op.create_foreign_key(None, "club_leagues", "clubs", ["club_id"], ["id"])
    op.create_foreign_key(None, "club_leagues", "leagues", ["league_id"], ["id"])
    op.alter_column(
        "leagues",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_index("idx_leagues_league_id", table_name="leagues")
    op.alter_column(
        "match_scores",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_index("idx_match_scores_date", table_name="match_scores")
    op.drop_index("idx_match_scores_league_id", table_name="match_scores")
    op.drop_index("idx_match_scores_teams", table_name="match_scores")
    op.drop_table_comment(
        "match_scores",
        existing_comment="Individual match results and scores",
        schema=None,
    )
    op.alter_column(
        "player_availability",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_index("idx_player_availability", table_name="player_availability")
    op.drop_index(
        "idx_player_availability_date_series", table_name="player_availability"
    )
    op.drop_index("idx_player_availability_player_id", table_name="player_availability")
    op.drop_constraint(
        "player_availability_player_name_match_date_series_id_key",
        "player_availability",
        type_="unique",
    )
    op.create_unique_constraint(
        "unique_player_availability",
        "player_availability",
        ["player_name", "match_date", "series_id"],
    )
    op.alter_column(
        "player_history",
        "end_pti",
        existing_type=sa.DOUBLE_PRECISION(precision=53),
        type_=sa.Numeric(precision=10, scale=2),
        existing_nullable=True,
    )
    op.alter_column(
        "player_history",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_index("idx_player_history_date", table_name="player_history")
    op.drop_index("idx_player_history_league_id", table_name="player_history")
    op.drop_index("idx_player_history_player_id", table_name="player_history")
    op.drop_table_comment(
        "player_history",
        existing_comment="Historical PTI data for players across different dates",
        schema=None,
    )
    op.alter_column(
        "players",
        "tenniscores_player_id",
        existing_type=sa.VARCHAR(length=255),
        nullable=False,
    )
    op.alter_column(
        "players",
        "wins",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Current season wins",
        existing_nullable=True,
        existing_server_default=sa.text("0"),
    )
    op.alter_column(
        "players",
        "losses",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Current season losses",
        existing_nullable=True,
        existing_server_default=sa.text("0"),
    )
    op.alter_column(
        "players",
        "win_percentage",
        existing_type=sa.NUMERIC(precision=5, scale=2),
        comment=None,
        existing_comment="Current season win percentage",
        existing_nullable=True,
        existing_server_default=sa.text("0.00"),
    )
    op.alter_column(
        "players",
        "career_win_percentage",
        existing_type=sa.NUMERIC(precision=5, scale=2),
        comment=None,
        existing_comment="Career win percentage",
        existing_nullable=True,
        existing_server_default=sa.text("0.00"),
    )
    op.alter_column(
        "players",
        "career_matches",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Career total matches (wins + losses)",
        existing_nullable=True,
        existing_server_default=sa.text("0"),
    )
    op.alter_column(
        "players",
        "career_wins",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Career total wins from player_history.json",
        existing_nullable=True,
        existing_server_default=sa.text("0"),
    )
    op.alter_column(
        "players",
        "career_losses",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Career total losses from player_history.json",
        existing_nullable=True,
        existing_server_default=sa.text("0"),
    )
    op.alter_column(
        "players",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_index(
        "idx_players_active",
        table_name="players",
        postgresql_where="(is_active = true)",
    )
    op.drop_index("idx_players_career_stats", table_name="players")
    op.drop_index("idx_players_club_id", table_name="players")
    op.drop_index("idx_players_current_league", table_name="players")
    op.drop_index("idx_players_current_league_id", table_name="players")
    op.drop_index(
        "idx_players_email",
        table_name="players",
        postgresql_where="(email IS NOT NULL)",
    )
    op.drop_index(
        "idx_players_league_active",
        table_name="players",
        postgresql_where="(is_active = true)",
    )
    op.drop_index("idx_players_league_id", table_name="players")
    op.drop_index("idx_players_names", table_name="players")
    op.drop_index("idx_players_series_id", table_name="players")
    op.drop_index("idx_players_tenniscores_id", table_name="players")
    op.drop_index("idx_user_email", table_name="players")
    op.drop_index("idx_users_tenniscores_player_id", table_name="players")
    op.create_foreign_key(None, "players", "leagues", ["league_id"], ["id"])
    op.alter_column(
        "schedule",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_index("idx_schedule_date", table_name="schedule")
    op.drop_index("idx_schedule_league_id", table_name="schedule")
    op.drop_index("idx_schedule_teams", table_name="schedule")
    op.drop_table_comment(
        "schedule", existing_comment="Upcoming match schedules", schema=None
    )
    op.alter_column(
        "series_leagues",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_index("idx_series_leagues_league_id", table_name="series_leagues")
    op.drop_index("idx_series_leagues_series_id", table_name="series_leagues")
    op.drop_constraint(
        "series_leagues_series_id_league_id_key", "series_leagues", type_="unique"
    )
    op.create_unique_constraint(
        "unique_series_league", "series_leagues", ["series_id", "league_id"]
    )
    op.drop_constraint(
        "series_leagues_series_id_fkey", "series_leagues", type_="foreignkey"
    )
    op.create_foreign_key(None, "series_leagues", "series", ["series_id"], ["id"])
    op.create_foreign_key(None, "series_leagues", "leagues", ["league_id"], ["id"])
    op.alter_column(
        "series_stats",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_index("idx_series_stats_league_id", table_name="series_stats")
    op.drop_index("idx_series_stats_series", table_name="series_stats")
    op.drop_index("idx_series_stats_team", table_name="series_stats")
    op.drop_table_comment(
        "series_stats",
        existing_comment="Team statistics by series within leagues",
        schema=None,
    )
    op.alter_column(
        "user_activity_logs",
        "timestamp",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_index("idx_user_activity_logs_user_email", table_name="user_activity_logs")
    op.alter_column(
        "user_instructions",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_index("idx_user_instructions_email", table_name="user_instructions")
    op.drop_index("idx_upa_player_id", table_name="user_player_associations")
    op.drop_index(
        "idx_upa_primary",
        table_name="user_player_associations",
        postgresql_where="(is_primary = true)",
    )
    op.drop_index("idx_upa_user_id", table_name="user_player_associations")
    op.drop_constraint(
        "user_player_associations_user_id_fkey",
        "user_player_associations",
        type_="foreignkey",
    )
    op.drop_constraint(
        "user_player_associations_player_id_fkey",
        "user_player_associations",
        type_="foreignkey",
    )
    op.create_foreign_key(
        None, "user_player_associations", "players", ["player_id"], ["id"]
    )
    op.create_foreign_key(
        None, "user_player_associations", "users", ["user_id"], ["id"]
    )
    op.alter_column(
        "users",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "users",
        "last_login",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=True,
    )
    op.drop_index("idx_users_club_id", table_name="users")
    op.drop_index("idx_users_league_id", table_name="users")
    op.drop_index("idx_users_series_id", table_name="users")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index("idx_users_series_id", "users", ["series_id"], unique=False)
    op.create_index("idx_users_league_id", "users", ["league_id"], unique=False)
    op.create_index("idx_users_club_id", "users", ["club_id"], unique=False)
    op.alter_column(
        "users",
        "last_login",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_constraint(None, "user_player_associations", type_="foreignkey")
    op.drop_constraint(None, "user_player_associations", type_="foreignkey")
    op.create_foreign_key(
        "user_player_associations_player_id_fkey",
        "user_player_associations",
        "players",
        ["player_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "user_player_associations_user_id_fkey",
        "user_player_associations",
        "users",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_index(
        "idx_upa_user_id", "user_player_associations", ["user_id"], unique=False
    )
    op.create_index(
        "idx_upa_primary",
        "user_player_associations",
        ["user_id", "is_primary"],
        unique=False,
        postgresql_where="(is_primary = true)",
    )
    op.create_index(
        "idx_upa_player_id", "user_player_associations", ["player_id"], unique=False
    )
    op.create_index(
        "idx_user_instructions_email", "user_instructions", ["user_email"], unique=False
    )
    op.alter_column(
        "user_instructions",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.create_index(
        "idx_user_activity_logs_user_email",
        "user_activity_logs",
        ["user_email", "timestamp"],
        unique=False,
    )
    op.alter_column(
        "user_activity_logs",
        "timestamp",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.create_table_comment(
        "series_stats",
        "Team statistics by series within leagues",
        existing_comment=None,
        schema=None,
    )
    op.create_index("idx_series_stats_team", "series_stats", ["team"], unique=False)
    op.create_index("idx_series_stats_series", "series_stats", ["series"], unique=False)
    op.create_index(
        "idx_series_stats_league_id", "series_stats", ["league_id"], unique=False
    )
    op.alter_column(
        "series_stats",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_constraint(None, "series_leagues", type_="foreignkey")
    op.drop_constraint(None, "series_leagues", type_="foreignkey")
    op.create_foreign_key(
        "series_leagues_series_id_fkey",
        "series_leagues",
        "series",
        ["series_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_constraint("unique_series_league", "series_leagues", type_="unique")
    op.create_unique_constraint(
        "series_leagues_series_id_league_id_key",
        "series_leagues",
        ["series_id", "league_id"],
        postgresql_nulls_not_distinct=False,
    )
    op.create_index(
        "idx_series_leagues_series_id", "series_leagues", ["series_id"], unique=False
    )
    op.create_index(
        "idx_series_leagues_league_id", "series_leagues", ["league_id"], unique=False
    )
    op.alter_column(
        "series_leagues",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.create_table_comment(
        "schedule", "Upcoming match schedules", existing_comment=None, schema=None
    )
    op.create_index(
        "idx_schedule_teams", "schedule", ["home_team", "away_team"], unique=False
    )
    op.create_index("idx_schedule_league_id", "schedule", ["league_id"], unique=False)
    op.create_index("idx_schedule_date", "schedule", ["match_date"], unique=False)
    op.alter_column(
        "schedule",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_constraint(None, "players", type_="foreignkey")
    op.create_index(
        "idx_users_tenniscores_player_id",
        "players",
        ["tenniscores_player_id"],
        unique=False,
    )
    op.create_index("idx_user_email", "players", ["email"], unique=False)
    op.create_index(
        "idx_players_tenniscores_id", "players", ["tenniscores_player_id"], unique=False
    )
    op.create_index("idx_players_series_id", "players", ["series_id"], unique=False)
    op.create_index(
        "idx_players_names", "players", ["first_name", "last_name"], unique=False
    )
    op.create_index("idx_players_league_id", "players", ["league_id"], unique=False)
    op.create_index(
        "idx_players_league_active",
        "players",
        ["league_id", "is_active"],
        unique=False,
        postgresql_where="(is_active = true)",
    )
    op.create_index(
        "idx_players_email",
        "players",
        ["email"],
        unique=True,
        postgresql_where="(email IS NOT NULL)",
    )
    op.create_index(
        "idx_players_current_league_id", "players", ["league_id"], unique=False
    )
    op.create_index(
        "idx_players_current_league", "players", ["league_id"], unique=False
    )
    op.create_index("idx_players_club_id", "players", ["club_id"], unique=False)
    op.create_index(
        "idx_players_career_stats",
        "players",
        ["career_wins", "career_losses"],
        unique=False,
    )
    op.create_index(
        "idx_players_active",
        "players",
        ["is_active"],
        unique=False,
        postgresql_where="(is_active = true)",
    )
    op.alter_column(
        "players",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "players",
        "career_losses",
        existing_type=sa.INTEGER(),
        comment="Career total losses from player_history.json",
        existing_nullable=True,
        existing_server_default=sa.text("0"),
    )
    op.alter_column(
        "players",
        "career_wins",
        existing_type=sa.INTEGER(),
        comment="Career total wins from player_history.json",
        existing_nullable=True,
        existing_server_default=sa.text("0"),
    )
    op.alter_column(
        "players",
        "career_matches",
        existing_type=sa.INTEGER(),
        comment="Career total matches (wins + losses)",
        existing_nullable=True,
        existing_server_default=sa.text("0"),
    )
    op.alter_column(
        "players",
        "career_win_percentage",
        existing_type=sa.NUMERIC(precision=5, scale=2),
        comment="Career win percentage",
        existing_nullable=True,
        existing_server_default=sa.text("0.00"),
    )
    op.alter_column(
        "players",
        "win_percentage",
        existing_type=sa.NUMERIC(precision=5, scale=2),
        comment="Current season win percentage",
        existing_nullable=True,
        existing_server_default=sa.text("0.00"),
    )
    op.alter_column(
        "players",
        "losses",
        existing_type=sa.INTEGER(),
        comment="Current season losses",
        existing_nullable=True,
        existing_server_default=sa.text("0"),
    )
    op.alter_column(
        "players",
        "wins",
        existing_type=sa.INTEGER(),
        comment="Current season wins",
        existing_nullable=True,
        existing_server_default=sa.text("0"),
    )
    op.alter_column(
        "players",
        "tenniscores_player_id",
        existing_type=sa.VARCHAR(length=255),
        nullable=True,
    )
    op.create_table_comment(
        "player_history",
        "Historical PTI data for players across different dates",
        existing_comment=None,
        schema=None,
    )
    op.create_index(
        "idx_player_history_player_id", "player_history", ["player_id"], unique=False
    )
    op.create_index(
        "idx_player_history_league_id", "player_history", ["league_id"], unique=False
    )
    op.create_index("idx_player_history_date", "player_history", ["date"], unique=False)
    op.alter_column(
        "player_history",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "player_history",
        "end_pti",
        existing_type=sa.Numeric(precision=10, scale=2),
        type_=sa.DOUBLE_PRECISION(precision=53),
        existing_nullable=True,
    )
    op.drop_constraint(
        "unique_player_availability", "player_availability", type_="unique"
    )
    op.create_unique_constraint(
        "player_availability_player_name_match_date_series_id_key",
        "player_availability",
        ["player_name", "match_date", "series_id"],
        postgresql_nulls_not_distinct=False,
    )
    op.create_index(
        "idx_player_availability_player_id",
        "player_availability",
        ["player_id"],
        unique=False,
    )
    op.create_index(
        "idx_player_availability_date_series",
        "player_availability",
        ["match_date", "series_id"],
        unique=False,
    )
    op.create_index(
        "idx_player_availability",
        "player_availability",
        ["player_name", "match_date", "series_id"],
        unique=False,
    )
    op.alter_column(
        "player_availability",
        "updated_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.create_table_comment(
        "match_scores",
        "Individual match results and scores",
        existing_comment=None,
        schema=None,
    )
    op.create_index(
        "idx_match_scores_teams",
        "match_scores",
        ["home_team", "away_team"],
        unique=False,
    )
    op.create_index(
        "idx_match_scores_league_id", "match_scores", ["league_id"], unique=False
    )
    op.create_index(
        "idx_match_scores_date", "match_scores", ["match_date"], unique=False
    )
    op.alter_column(
        "match_scores",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.create_index("idx_leagues_league_id", "leagues", ["league_id"], unique=False)
    op.alter_column(
        "leagues",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_constraint(None, "club_leagues", type_="foreignkey")
    op.drop_constraint(None, "club_leagues", type_="foreignkey")
    op.create_foreign_key(
        "club_leagues_club_id_fkey",
        "club_leagues",
        "clubs",
        ["club_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_constraint("unique_club_league", "club_leagues", type_="unique")
    op.create_index(
        "idx_club_leagues_league_id", "club_leagues", ["league_id"], unique=False
    )
    op.create_index(
        "idx_club_leagues_club_id", "club_leagues", ["club_id"], unique=False
    )
    op.create_unique_constraint(
        "club_leagues_club_id_league_id_key",
        "club_leagues",
        ["club_id", "league_id"],
        postgresql_nulls_not_distinct=False,
    )
    op.alter_column(
        "club_leagues",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    # ### end Alembic commands ###
